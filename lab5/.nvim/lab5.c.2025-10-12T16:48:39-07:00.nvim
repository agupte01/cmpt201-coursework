#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size) {
      return current->id;
    }
    current = current->next;
  }

  return -1;
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = 1;
  uint64_t smallest_fit = UINT64_MAX;
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size && current->size < smallest_fit) {
      smallest_fit = current->size;
      best_fit_id = current->id;
    }
    current = current->next;
  }

  return best_fit_id;
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = 1;
  uint64_t largest_fit = 0;
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size && current->size < largest_fit) {
      largest_fit = current->size;
      worst_fit_id = current->id;
    }
    current = current->next;
  }
  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);

  free(free_block1);
  free(free_block2);
  free(free_block3);
  free(free_block4);
  free(free_block5);

  return 0;
}



/*Part 2: Coalescing Contiguous Free Block Pseudo-code algorithm
 *
 * lets assume we have input: newly_freed_block at an address A which has a size of S
 *
 * Step 1: We will traverse the free flist to find adjacent blocks:
 *        - If we find a block ends at address A, we will save it as merge_before
 *        - If address A+S reaches the start of a block in that case we will save it as merge_after
 *
 * Step 2: Merge based on what we just found
 *         - If basically merge_before and merge_after exist then:
 *              # Combine all thrree: merge_before->size += S + merge_after->size
 *              # Then remove merge_after from the list
 *
 *         - Else if only merge_before exists then:
 *              # Extend it: merge_before->size += S
 *
 *         - Else if only merge_after exists then:
 *              # We will create a new block at A with size = S + merge_after->size
 *              # Then we will replace merge_after in the list with a new block
 *         
 *         - Else if there are no adjacent blocks then:
 *              # We will add a newely freed blockto the free list
 *
 * Step 3: Return updated free list
 */



